prometheus:
  prometheusSpec:
    podMonitorSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
    

grafana:
  persistence:
    enabled: true
    accessModes: ["ReadWriteOnce"]
    size: 5Gi



prometheusRules:
  additionalGroups:
  - name: custom-rules
    rules:
    - alert: HighCPUUsage
      expr: 100 - (avg by(instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "High CPU usage detected"
        description: "CPU usage is above 80% for 5 minutes on {{ $labels.instance }}"
    - name: test-alerts

  - name: test-alerts
    rules:
    - alert: TestAlert
      expr: vector(1)  # This always evaluates to true
      labels:
        severity: critical
      annotations:
        summary: "This is a test alert"
        description: "This alert was triggered for testing purposes"
  - name: deployment-rules
    rules:
    - alert: DeploymentReplicasBelowThreshold
      expr: kube_deployment_status_replicas_available{deployment="test2", namespace="default"} < 4
      for: 2m  # Wait for 2 minutes before firing to avoid alerts during brief fluctuations
      labels:
        severity: critical  # You can adjust this based on how critical this is
      annotations:
        summary: "Deployment replicas below threshold"
        description: "Deployment {{ $labels.deployment }} in namespace {{ $labels.namespace }} has fewer than 4 available replicas: {{ $value }}"


alertmanager:
  config:
    global:
      resolve_timeout: 5m
    route:
      group_by: ['job', 'alertname', 'severity']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 12h
      receiver: 'slack-notifications'
      routes:
      - match:
          severity: critical
        receiver: 'slack-notifications'
    receivers:
    - name: 'slack-notifications'
      slack_configs:
      - api_url: 'https://hooks.slack.com/services/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'
        channel: '#grid-capstone-notification'
        send_resolved: true
        title: '{{ template "slack.default.title" . }}'
        text: '{{ template "slack.default.text" . }}'






#   config:
#     global:
#       slack_api_url: https://hooks.slack.com/services/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
#   alertmanagerSpec:
#     alertmanagerConfigNamespaceSelector:
#     alertmanagerConfigSelector:
#     alertmanagerConfigMatcherStrategy:
#       type: None

# kubeScheduler:
#   enabled: false
# kubeControllerManager:
#   enabled: false